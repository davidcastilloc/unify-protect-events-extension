version: '3.8'

services:
  unifi-protect-notifications:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: unifi-protect-notifications:latest
    container_name: unifi-protect-notifications
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - LOG_LEVEL=info
      - UNIFI_HOST=${UNIFI_HOST:-192.168.1.100}
      - UNIFI_PORT=${UNIFI_PORT:-443}
      - UNIFI_API_KEY=${UNIFI_API_KEY}
      - UNIFI_SSL_VERIFY=${UNIFI_SSL_VERIFY:-false}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3001}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - unifi-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.unifi-protect.rule=Host(`unifi-protect.example.com`)"
      - "traefik.http.routers.unifi-protect.tls=true"
      - "traefik.http.routers.unifi-protect.tls.certresolver=letsencrypt"
      - "traefik.http.services.unifi-protect.loadbalancer.server.port=3001"

  # Redis for caching and session management (optional)
  redis:
    image: redis:7-alpine
    container_name: unifi-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - unifi-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpassword}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: unifi-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - unifi-network
    depends_on:
      - unifi-protect-notifications
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: unifi-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - unifi-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: unifi-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - unifi-network
    depends_on:
      - prometheus

networks:
  unifi-network:
    driver: bridge

volumes:
  redis-data:
  prometheus-data:
  grafana-data:
