name: 🚀 Deployment

on:
  workflow_run:
    workflows: ["CI/CD Pipeline - UniFi Protect Notifications"]
    types: [completed]
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment even if CI failed'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    name: 🚀 Deploy to ${{ github.event.inputs.environment || 'auto' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: |
      (github.event.workflow_run.conclusion == 'success' || 
       github.event.inputs.force_deploy == 'true' ||
       github.event_name == 'workflow_dispatch')
    
    environment: 
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
      url: ${{ github.ref == 'refs/heads/main' && 'https://unifi-protect.example.com' || 'https://staging.unifi-protect.example.com' }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🏷️ Get Image Tag
        id: image-tag
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            echo "tag=develop" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: 🚀 Deploy to Kubernetes
        run: |
          echo "🚀 Deploying to ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }}"
          
          # Aquí iría tu lógica de deployment específica
          # Por ejemplo:
          # kubectl set image deployment/unifi-protect-notifications \
          #   unifi-protect-notifications=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }} \
          #   -n ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
          
          echo "✅ Deployment completed!"

      - name: 🧪 Post-Deployment Tests
        run: |
          echo "🧪 Running post-deployment tests..."
          # Aquí irían tus tests de post-deployment
          sleep 30
          echo "✅ Post-deployment tests passed!"

      - name: 📊 Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Image Tag | ${{ steps.image-tag.outputs.tag }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment Time | $(date -u) |" >> $GITHUB_STEP_SUMMARY
          echo "| Status | ✅ Success |" >> $GITHUB_STEP_SUMMARY
