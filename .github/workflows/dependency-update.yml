name: 📦 Dependency Updates

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  update-dependencies:
    name: 📦 Check for Dependency Updates
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔍 Check for Updates
        id: updates
        run: |
          echo "Checking for dependency updates..."
          npm outdated --json > outdated.json || true
          
          if [ -s outdated.json ]; then
            echo "has-updates=true" >> $GITHUB_OUTPUT
            echo "Found dependency updates"
            cat outdated.json
          else
            echo "has-updates=false" >> $GITHUB_OUTPUT
            echo "No dependency updates found"
          fi

      - name: 📝 Create Update Issue
        if: steps.updates.outputs.has-updates == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const outdated = JSON.parse(fs.readFileSync('outdated.json', 'utf8'));
            
            let issueBody = '## 📦 Dependency Updates Available\n\n';
            issueBody += 'The following dependencies have updates available:\n\n';
            
            for (const [packageName, info] of Object.entries(outdated)) {
              issueBody += `### ${packageName}\n`;
              issueBody += `- **Current**: ${info.current}\n`;
              issueBody += `- **Latest**: ${info.latest}\n`;
              issueBody += `- **Type**: ${info.type}\n\n`;
            }
            
            issueBody += '## 🔧 Action Required\n\n';
            issueBody += 'Please review and update these dependencies:\n';
            issueBody += '1. Test the updates in a development environment\n';
            issueBody += '2. Update package.json and package-lock.json\n';
            issueBody += '3. Run the CI/CD pipeline to ensure compatibility\n';
            issueBody += '4. Close this issue once updates are complete\n\n';
            issueBody += '---\n';
            issueBody += `*This issue was automatically generated on ${new Date().toISOString()}*`;
            
            // Check if similar issue already exists
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'dependencies,automated'
            });
            
            const existingIssue = issues.find(issue => 
              issue.title.includes('Dependency Updates') && 
              issue.body.includes('Dependency Updates Available')
            );
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `📦 Dependency Updates - ${new Date().toLocaleDateString()}`,
                body: issueBody,
                labels: ['dependencies', 'automated', 'maintenance']
              });
            }

      - name: 📊 Update Summary
        run: |
          echo "## 📦 Dependency Update Check" >> $GITHUB_STEP_SUMMARY
          echo "| Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Updates Found | ${{ steps.updates.outputs.has-updates == 'true' && '✅ Yes' || '❌ No' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Issue Created | ${{ steps.updates.outputs.has-updates == 'true' && '✅ Yes' || '⏭️ N/A' }} |" >> $GITHUB_STEP_SUMMARY
