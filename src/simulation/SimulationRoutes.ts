import { Router, Request, Response } from 'express';
import { SimulationController } from './SimulationController';
import { SimulationConfig } from './EventSimulator';

export class SimulationRoutes {
  private router: Router;
  private simulationController: SimulationController;

  constructor() {
    this.router = Router();
    this.simulationController = new SimulationController();
    this.setupRoutes();
  }

  private setupRoutes(): void {
    // Obtener estado de la simulaci√≥n
    this.router.get('/status', (req: Request, res: Response) => {
      try {
        const status = this.simulationController.getSimulationStatus();
        res.json({
          success: true,
          data: status
        });
      } catch (error) {
        res.status(500).json({
          success: false,
          error: 'Error obteniendo estado de simulaci√≥n'
        });
      }
    });

    // Iniciar simulaci√≥n
    this.router.post('/start', (req: Request, res: Response) => {
      try {
        const { config } = req.body;
        console.log('üé≠ Intentando iniciar simulaci√≥n con config:', config);
        const success = this.simulationController.startSimulation(config);
        
        if (success) {
          console.log('‚úÖ Simulaci√≥n iniciada exitosamente');
          res.json({
            success: true,
            message: 'Simulaci√≥n iniciada correctamente'
          });
        } else {
          console.log('‚ùå Error iniciando simulaci√≥n');
          res.status(400).json({
            success: false,
            error: 'No se pudo iniciar la simulaci√≥n'
          });
        }
      } catch (error) {
        console.error('‚ùå Error iniciando simulaci√≥n:', error);
        res.status(500).json({
          success: false,
          error: 'Error iniciando simulaci√≥n'
        });
      }
    });

    // Detener simulaci√≥n
    this.router.post('/stop', (req: Request, res: Response) => {
      try {
        const success = this.simulationController.stopSimulation();
        res.json({
          success: true,
          message: 'Simulaci√≥n detenida correctamente'
        });
      } catch (error) {
        res.status(500).json({
          success: false,
          error: 'Error deteniendo simulaci√≥n'
        });
      }
    });

    // Pausar simulaci√≥n
    this.router.post('/pause', (req: Request, res: Response) => {
      try {
        const success = this.simulationController.pauseSimulation();
        if (success) {
          res.json({
            success: true,
            message: 'Simulaci√≥n pausada correctamente'
          });
        } else {
          res.json({
            success: false,
            message: 'La simulaci√≥n ya estaba pausada'
          });
        }
      } catch (error) {
        res.status(500).json({
          success: false,
          error: 'Error pausando simulaci√≥n'
        });
      }
    });

    // Reanudar simulaci√≥n
    this.router.post('/resume', (req: Request, res: Response) => {
      try {
        const success = this.simulationController.resumeSimulation();
        if (success) {
          res.json({
            success: true,
            message: 'Simulaci√≥n reanudada correctamente'
          });
        } else {
          res.json({
            success: false,
            message: 'La simulaci√≥n ya estaba activa'
          });
        }
      } catch (error) {
        res.status(500).json({
          success: false,
          error: 'Error reanudando simulaci√≥n'
        });
      }
    });

    // Generar evento √∫nico
    this.router.post('/generate-event', (req: Request, res: Response) => {
      try {
        const { eventType } = req.body;
        console.log('üé≤ Generando evento √∫nico:', eventType);
        const event = this.simulationController.generateSingleEvent(eventType);
        
        if (event) {
          console.log('‚úÖ Evento generado exitosamente:', event.type);
          res.json({
            success: true,
            data: event,
            message: 'Evento generado correctamente'
          });
        } else {
          console.log('‚ùå Error generando evento');
          res.status(400).json({
            success: false,
            error: 'No se pudo generar el evento'
          });
        }
      } catch (error) {
        console.error('‚ùå Error generando evento:', error);
        res.status(500).json({
          success: false,
          error: 'Error generando evento'
        });
      }
    });

    // Actualizar configuraci√≥n
    this.router.put('/config', (req: Request, res: Response) => {
      try {
        const { config } = req.body;
        
        if (!config || typeof config !== 'object') {
          return res.status(400).json({
            success: false,
            error: 'Configuraci√≥n inv√°lida'
          });
        }

        const success = this.simulationController.updateSimulationConfig(config);
        
        if (success) {
          return res.json({
            success: true,
            message: 'Configuraci√≥n actualizada correctamente',
            data: this.simulationController.getSimulationStatus().config
          });
        } else {
          return res.status(400).json({
            success: false,
            error: 'Error actualizando configuraci√≥n'
          });
        }
      } catch (error) {
        return res.status(500).json({
          success: false,
          error: 'Error actualizando configuraci√≥n'
        });
      }
    });

    // Reiniciar simulaci√≥n
    this.router.post('/reset', (req: Request, res: Response) => {
      try {
        const success = this.simulationController.resetSimulation();
        res.json({
          success: true,
          message: 'Simulaci√≥n reiniciada correctamente'
        });
      } catch (error) {
        res.status(500).json({
          success: false,
          error: 'Error reiniciando simulaci√≥n'
        });
      }
    });

    // Obtener informaci√≥n disponible
    this.router.get('/info', (req: Request, res: Response) => {
      try {
        const info = {
          eventTypes: this.simulationController.getAvailableEventTypes(),
          severities: this.simulationController.getAvailableSeverities(),
          cameras: this.simulationController.getAvailableCameras()
        };
        
        res.json({
          success: true,
          data: info
        });
      } catch (error) {
        res.status(500).json({
          success: false,
          error: 'Error obteniendo informaci√≥n de simulaci√≥n'
        });
      }
    });

    // Obtener estad√≠sticas
    this.router.get('/stats', (req: Request, res: Response) => {
      try {
        const stats = {
          eventCount: this.simulationController.getEventCount(),
          isActive: this.simulationController.isSimulationActive(),
          isConnected: this.simulationController.isConnectedToNotificationService()
        };
        
        res.json({
          success: true,
          data: stats
        });
      } catch (error) {
        res.status(500).json({
          success: false,
          error: 'Error obteniendo estad√≠sticas'
        });
      }
    });
  }

  public getRouter(): Router {
    return this.router;
  }

  public getSimulationController(): SimulationController {
    return this.simulationController;
  }
}
